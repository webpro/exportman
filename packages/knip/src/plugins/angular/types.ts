/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^(?:@[a-zA-Z0-9._-]+/)?[a-zA-Z0-9._-]+$".
 */
export type Project = Project1 & {
  /**
   * The prefix to apply to generated selectors.
   */
  /**
   * Root of the project files.
   */
  /**
   * The root of the source files, assets and index.html file structure.
   */
  /**
   * Project type.
   */
  architect?: {
    [k: string]:
      | {
          /**
           * The builder used for this package.
           */
          builder: string;
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: {
            [k: string]: unknown;
          };
          /**
           * A map of alternative target options.
           */
          configurations?: {
            [k: string]: {
              [k: string]: unknown;
            };
          };
        }
      | {
          builder?: '@angular/build:application';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: ApplicationSchemaForBuildFacade;
          configurations?: {
            [k: string]: ApplicationSchemaForBuildFacade;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:application';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: ApplicationSchemaForBuildFacade;
          configurations?: {
            [k: string]: ApplicationSchemaForBuildFacade;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:app-shell';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: AppShellTarget;
          configurations?: {
            [k: string]: AppShellTarget;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:browser';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: WebpackBrowserSchemaForBuildFacade;
          configurations?: {
            [k: string]: WebpackBrowserSchemaForBuildFacade;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:browser-esbuild';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: EsbuildBrowserSchemaForBuildFacade;
          configurations?: {
            [k: string]: EsbuildBrowserSchemaForBuildFacade;
          };
        }
      | {
          builder?: '@angular/build:dev-server';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: DevServerTarget;
          configurations?: {
            [k: string]: DevServerTarget;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:dev-server';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: DevServerTarget1;
          configurations?: {
            [k: string]: DevServerTarget1;
          };
        }
      | {
          builder?: '@angular/build:extract-i18n';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: ExtractI18NTarget;
          configurations?: {
            [k: string]: ExtractI18NTarget;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:extract-i18n';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: ExtractI18NTarget1;
          configurations?: {
            [k: string]: ExtractI18NTarget1;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:karma';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: KarmaTarget;
          configurations?: {
            [k: string]: KarmaTarget;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:jest';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: JestBrowserSchemaForBuildFacade;
          configurations?: {
            [k: string]: JestBrowserSchemaForBuildFacade;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:web-test-runner';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: WebTestRunnerTarget;
          configurations?: {
            [k: string]: WebTestRunnerTarget;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:prerender';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: PrerenderTarget;
          configurations?: {
            [k: string]: PrerenderTarget;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:ssr-dev-server';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: SSRDevServerTarget;
          configurations?: {
            [k: string]: SSRDevServerTarget;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:server';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: UniversalTarget;
          configurations?: {
            [k: string]: UniversalTarget;
          };
        }
      | {
          builder?: '@angular-devkit/build-angular:ng-packagr';
          /**
           * A default named configuration to use when a target configuration is not provided.
           */
          defaultConfiguration?: string;
          options?: NgPackagrTarget;
          configurations?: {
            [k: string]: NgPackagrTarget;
          };
        };
  };
  /**
   * This interface was referenced by `undefined`'s JSON-Schema definition
   * via the `patternProperty` "^[a-z]{1,3}-.*".
   */
  [k: string]: unknown;
};
type Project1 = {
  [k: string]: unknown;
};
type PrerenderTarget = {
  [k: string]: unknown;
};

export interface AngularCLIWorkspaceConfiguration {
  /**
   * Path where new projects will be created.
   */
  projects?: {
    [k: string]: Project;
  };
}
/**
 * Application builder target options
 */
interface ApplicationSchemaForBuildFacade {
  /**
   * List of static application assets.
   */
  assets?: (
    | {
        /**
         * Allow glob patterns to follow symlink directories. This allows subdirectories of the symlink to be searched.
         */
        followSymlinks?: boolean;
        /**
         * The pattern to match.
         */
        glob: string;
        /**
         * The input directory path in which to apply 'glob'. Defaults to the project root.
         */
        input: string;
        /**
         * An array of globs to ignore.
         */
        ignore?: string[];
        /**
         * Absolute path within the output.
         */
        output?: string;
      }
    | string
  )[];
  /**
   * The full path for the browser entry point to the application, relative to the current workspace.
   */
  browser: string;
  /**
   * The full path for the server entry point to the application, relative to the current workspace.
   */
  server?: (string | false) & string;
  /**
   * A list of polyfills to include in the build. Can be a full path for a file, relative to the current workspace or module specifier. Example: 'zone.js'.
   */
  polyfills?: string[];
  /**
   * The full path for the TypeScript configuration file, relative to the current workspace.
   */
  tsConfig: string;
  /**
   * Customize the base path for the URLs of resources in 'index.html' and component stylesheets. This option is only necessary for specific deployment scenarios, such as with Angular Elements or when utilizing different CDN locations.
   */
  deployUrl?: string;
  /**
   * Security features to protect against XSS and other common attacks
   */
  security?: {
    /**
     * Enables automatic generation of a hash-based Strict Content Security Policy (https://web.dev/articles/strict-csp#choose-hash) based on scripts in index.html. Will default to true once we are out of experimental/preview phases.
     */
    autoCsp?:
      | {
          /**
           * Include the `unsafe-eval` directive (https://web.dev/articles/strict-csp#remove-eval) in the auto-CSP. Please only enable this if you are absolutely sure that you need to, as allowing calls to eval will weaken the XSS defenses provided by the auto-CSP.
           */
          unsafeEval?: boolean;
        }
      | boolean;
  };
  /**
   * Global scripts to be included in the build.
   */
  scripts?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * Global styles to be included in the build.
   */
  styles?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * The stylesheet language to use for the application's inline component styles.
   */
  inlineStyleLanguage?: 'css' | 'less' | 'sass' | 'scss';
  /**
   * Options to pass to style preprocessors.
   */
  stylePreprocessorOptions?: {
    /**
     * Paths to include. Paths will be resolved to workspace root.
     */
    includePaths?: string[];
    /**
     * Options to pass to the sass preprocessor.
     */
    sass?: {
      /**
       * A set of deprecations to treat as fatal. If a deprecation warning of any provided type is encountered during compilation, the compiler will error instead. If a Version is provided, then all deprecations that were active in that compiler version will be treated as fatal.
       */
      fatalDeprecations?: string[];
      /**
       *  A set of active deprecations to ignore. If a deprecation warning of any provided type is encountered during compilation, the compiler will ignore it instead.
       */
      silenceDeprecations?: string[];
      /**
       * A set of future deprecations to opt into early. Future deprecations passed here will be treated as active by the compiler, emitting warnings as necessary.
       */
      futureDeprecations?: string[];
    };
  };
  /**
   * Exclude the listed external dependencies from being bundled into the bundle. Instead, the created bundle relies on these dependencies to be available during runtime.
   */
  externalDependencies?: string[];
  /**
   * Automatically clear the terminal screen during rebuilds.
   */
  clearScreen?: boolean;
  /**
   * Enables optimization of the build output. Including minification of scripts and styles, tree-shaking, dead-code elimination, inlining of critical CSS and fonts inlining. For more information, see https://angular.dev/reference/configs/workspace-config#optimization-configuration.
   */
  optimization?:
    | {
        /**
         * Enables optimization of the scripts output.
         */
        scripts?: boolean;
        /**
         * Enables optimization of the styles output.
         */
        styles?:
          | {
              /**
               * Minify CSS definitions by removing extraneous whitespace and comments, merging identifiers and minimizing values.
               */
              minify?: boolean;
              /**
               * Extract and inline critical CSS definitions to improve first paint time.
               */
              inlineCritical?: boolean;
              /**
               * Remove comments in global CSS that contains '@license' or '@preserve' or that starts with '//!' or '/*!'.
               */
              removeSpecialComments?: boolean;
            }
          | boolean;
        /**
         * Enables optimization for fonts. This option requires internet access. `HTTPS_PROXY` environment variable can be used to specify a proxy server.
         */
        fonts?:
          | {
              /**
               * Reduce render blocking requests by inlining external Google Fonts and Adobe Fonts CSS definitions in the application's HTML index file. This option requires internet access. `HTTPS_PROXY` environment variable can be used to specify a proxy server.
               */
              inline?: boolean;
            }
          | boolean;
      }
    | boolean;
  /**
   * Defines the type of loader to use with a specified file extension when used with a JavaScript `import`. `text` inlines the content as a string; `binary` inlines the content as a Uint8Array; `file` emits the file and provides the runtime location of the file; `empty` considers the content to be empty and not include it in bundles.
   */
  loader?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^\.\S+$".
     */
    [k: string]: 'text' | 'binary' | 'file' | 'empty';
  };
  /**
   * Defines global identifiers that will be replaced with a specified constant value when found in any JavaScript or TypeScript code including libraries. The value will be used directly. String values must be put in quotes. Identifiers within Angular metadata such as Component Decorators will not be replaced.
   */
  define?: {
    [k: string]: string;
  };
  /**
   * Replace compilation source files with other compilation source files in the build.
   */
  fileReplacements?: FileReplacement[];
  /**
   * Specify the output path relative to workspace root.
   */
  outputPath:
    | {
        /**
         * Specify the output path relative to workspace root.
         */
        base: string;
        /**
         * The output directory name of your browser build within the output path base. Defaults to 'browser'.
         */
        browser?: string;
        /**
         * The output directory name of your server build within the output path base. Defaults to 'server'.
         */
        server?: string;
        /**
         * The output directory name of your media files within the output browser directory. Defaults to 'media'.
         */
        media?: string;
      }
    | string;
  /**
   * Build using Ahead of Time compilation.
   */
  aot?: boolean;
  /**
   * Output source maps for scripts and styles. For more information, see https://angular.dev/reference/configs/workspace-config#source-map-configuration.
   */
  sourceMap?:
    | {
        /**
         * Output source maps for all scripts.
         */
        scripts?: boolean;
        /**
         * Output source maps for all styles.
         */
        styles?: boolean;
        /**
         * Output source maps used for error reporting tools.
         */
        hidden?: boolean;
        /**
         * Resolve vendor packages source maps.
         */
        vendor?: boolean;
      }
    | boolean;
  /**
   * Base url for the application being built.
   */
  baseHref?: string;
  /**
   * Adds more details to output logging.
   */
  verbose?: boolean;
  /**
   * Log progress to the console while building.
   */
  progress?: boolean;
  /**
   * How to handle missing translations for i18n.
   */
  i18nMissingTranslation?: 'warning' | 'error' | 'ignore';
  /**
   * How to handle duplicate translations for i18n.
   */
  i18nDuplicateTranslation?: 'warning' | 'error' | 'ignore';
  /**
   * Translate the bundles in one or more locales.
   */
  localize?: boolean | [string, ...string[]];
  /**
   * Run build when files change.
   */
  watch?: boolean;
  /**
   * Define the output filename cache-busting hashing mode.
   */
  outputHashing?: 'none' | 'all' | 'media' | 'bundles';
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
  /**
   * Delete the output path before building.
   */
  deleteOutputPath?: boolean;
  /**
   * Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set.
   */
  preserveSymlinks?: boolean;
  /**
   * Extract all licenses in a separate file.
   */
  extractLicenses?: boolean;
  /**
   * Use file name for lazy loaded chunks.
   */
  namedChunks?: boolean;
  /**
   * Enables the use of subresource integrity validation.
   */
  subresourceIntegrity?: boolean;
  /**
   * Generates a service worker configuration.
   */
  serviceWorker?: string | false;
  /**
   * Configures the generation of the application's HTML index.
   */
  index:
    | string
    | {
        /**
         * The path of a file to use for the application's generated HTML index.
         */
        input: string;
        /**
         * The output path of the application's generated HTML index file. The full provided path will be used and will be considered relative to the application's configured output path.
         */
        output?: string;
        /**
         * Generates 'preload', 'modulepreload', and 'preconnect' link elements for initial application files and resources.
         */
        preloadInitial?: boolean;
        [k: string]: unknown;
      }
    | false;
  /**
   * Generates a 'stats.json' file which can be analyzed with https://esbuild.github.io/analyze/.
   */
  statsJson?: boolean;
  /**
   * Budget thresholds to ensure parts of your application stay within boundaries which you set.
   */
  budgets?: Budget[];
  /**
   * TypeScript configuration for Web Worker modules.
   */
  webWorkerTsConfig?: string;
  /**
   * Define the crossorigin attribute setting of elements that provide CORS support.
   */
  crossOrigin?: 'none' | 'anonymous' | 'use-credentials';
  /**
   * A list of CommonJS or AMD packages that are allowed to be used without a build time warning. Use `'*'` to allow all.
   */
  allowedCommonJsDependencies?: string[];
  /**
   * Prerender (SSG) pages of your application during build time.
   */
  prerender?:
    | boolean
    | {
        /**
         * The path to a file that contains a list of all routes to prerender, separated by newlines. This option is useful if you want to prerender routes with parameterized URLs.
         */
        routesFile?: string;
        /**
         * Whether the builder should process the Angular Router configuration to find all unparameterized routes and prerender them.
         */
        discoverRoutes?: boolean;
      };
  /**
   * Server side render (SSR) pages of your application during runtime.
   */
  ssr?:
    | boolean
    | {
        /**
         * The server entry-point that when executed will spawn the web server.
         */
        entry?: string;
        /**
         * Specifies the platform for which the server bundle is generated. This affects the APIs and modules available in the server-side code.
         *
         * - `node`:  (Default) Generates a bundle optimized for Node.js environments.
         * - `neutral`: Generates a platform-neutral bundle suitable for environments like edge workers, and other serverless platforms. This option avoids using Node.js-specific APIs, making the bundle more portable.
         *
         * Please note that this feature does not provide polyfills for Node.js modules. Additionally, it is experimental, and the schematics may undergo changes in future versions.
         */
        experimentalPlatform?: 'node' | 'neutral';
      };
  /**
   * Generates an application shell during build time.
   */
  appShell?: boolean;
  /**
   * Defines the build output target. 'static': Generates a static site for deployment on any static hosting service. 'server': Produces an application designed for deployment on a server that supports server-side rendering (SSR).
   */
  outputMode?: 'static' | 'server';
}
interface FileReplacement {
  replace: string;
  with: string;
}
interface Budget {
  /**
   * The type of budget.
   */
  type: 'all' | 'allScript' | 'any' | 'anyScript' | 'anyComponentStyle' | 'bundle' | 'initial';
  /**
   * The name of the bundle.
   */
  name?: string;
  /**
   * The baseline size for comparison.
   */
  baseline?: string;
  /**
   * The maximum threshold for warning relative to the baseline.
   */
  maximumWarning?: string;
  /**
   * The maximum threshold for error relative to the baseline.
   */
  maximumError?: string;
  /**
   * The minimum threshold for warning relative to the baseline.
   */
  minimumWarning?: string;
  /**
   * The minimum threshold for error relative to the baseline.
   */
  minimumError?: string;
  /**
   * The threshold for warning relative to the baseline (min & max).
   */
  warning?: string;
  /**
   * The threshold for error relative to the baseline (min & max).
   */
  error?: string;
}
/**
 * App Shell target options for Build Facade.
 */
interface AppShellTarget {
  /**
   * A browser builder target use for rendering the application shell in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.
   */
  browserTarget: string;
  /**
   * A server builder target use for rendering the application shell in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.
   */
  serverTarget: string;
  /**
   * Script that exports the Server AppModule to render. This should be the main JavaScript outputted by the server target. By default we will resolve the outputPath of the serverTarget and find a bundle named 'main' in it (whether or not there's a hash tag).
   */
  appModuleBundle?: string;
  /**
   * The route to render.
   */
  route?: string;
  /**
   * The input path for the index.html file. By default uses the output index.html of the browser target.
   */
  inputIndexPath?: string;
  /**
   * The output path of the index.html file. By default will overwrite the input file.
   */
  outputIndexPath?: string;
}
/**
 * Browser target options
 */
export interface WebpackBrowserSchemaForBuildFacade {
  /**
   * List of static application assets.
   */
  /**
   * The full path for the main entry point to the app, relative to the current workspace.
   */
  main: string;
  /**
   * Polyfills to be included in the build.
   */
  /**
   * The full path for the TypeScript configuration file, relative to the current workspace.
   */
  tsConfig: string;
  /**
   * Global scripts to be included in the build.
   */
  scripts?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * Global styles to be included in the build.
   */
  /**
   * The stylesheet language to use for the application's inline component styles.
   */
  /**
   * Options to pass to style preprocessors.
   */
  /**
   * Enables optimization of the build output. Including minification of scripts and styles, tree-shaking, dead-code elimination, inlining of critical CSS and fonts inlining. For more information, see https://angular.dev/reference/configs/workspace-config#optimization-configuration.
   */
  /**
   * Replace compilation source files with other compilation source files in the build.
   */
  fileReplacements?: (
    | {
        src: string;
        replaceWith: string;
      }
    | {
        replace: string;
        with: string;
      }
  )[];
  /**
   * The full path for the new output directory, relative to the current workspace.
   */
  /**
   * The path where style resources will be placed, relative to outputPath.
   */
  /**
   * Build using Ahead of Time compilation.
   */
  /**
   * Output source maps for scripts and styles. For more information, see https://angular.dev/reference/configs/workspace-config#source-map-configuration.
   */
  /**
   * Generate a seperate bundle containing only vendor libraries. This option should only be used for development to reduce the incremental compilation time.
   */
  /**
   * Generate a seperate bundle containing code used across multiple bundles.
   */
  /**
   * Base url for the application being built.
   */
  /**
   * Customize the base path for the URLs of resources in 'index.html' and component stylesheets. This option is only necessary for specific deployment scenarios, such as with Angular Elements or when utilizing different CDN locations.
   */
  /**
   * Adds more details to output logging.
   */
  /**
   * Log progress to the console while building.
   */
  /**
   * How to handle missing translations for i18n.
   */
  /**
   * How to handle duplicate translations for i18n.
   */
  /**
   * Translate the bundles in one or more locales.
   */
  /**
   * Run build when files change.
   */
  /**
   * Define the output filename cache-busting hashing mode.
   */
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  /**
   * Delete the output path before building.
   */
  /**
   * Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set.
   */
  /**
   * Extract all licenses in a separate file.
   */
  /**
   * Enables advanced build optimizations when using the 'aot' option.
   */
  /**
   * Use file name for lazy loaded chunks.
   */
  /**
   * Enables the use of subresource integrity validation.
   */
  /**
   * Generates a service worker config for production builds.
   */
  /**
   * Path to ngsw-config.json.
   */
  /**
   * Configures the generation of the application's HTML index.
   */
  /**
   * Generates a 'stats.json' file which can be analyzed using tools such as 'webpack-bundle-analyzer'.
   */
  /**
   * Budget thresholds to ensure parts of your application stay within boundaries which you set.
   */
  /**
   * TypeScript configuration for Web Worker modules.
   */
  /**
   * Define the crossorigin attribute setting of elements that provide CORS support.
   */
  /**
   * A list of CommonJS or AMD packages that are allowed to be used without a build time warning. Use `'*'` to allow all.
   */
}
/**
 * Browser target options
 */
interface EsbuildBrowserSchemaForBuildFacade {
  /**
   * List of static application assets.
   */
  assets?: (
    | {
        /**
         * Allow glob patterns to follow symlink directories. This allows subdirectories of the symlink to be searched.
         */
        followSymlinks?: boolean;
        /**
         * The pattern to match.
         */
        glob: string;
        /**
         * The input directory path in which to apply 'glob'. Defaults to the project root.
         */
        input: string;
        /**
         * An array of globs to ignore.
         */
        ignore?: string[];
        /**
         * Absolute path within the output.
         */
        output?: string;
      }
    | string
  )[];
  /**
   * The full path for the main entry point to the app, relative to the current workspace.
   */
  main: string;
  /**
   * Polyfills to be included in the build.
   */
  polyfills?: string[] | string;
  /**
   * The full path for the TypeScript configuration file, relative to the current workspace.
   */
  tsConfig: string;
  /**
   * Global scripts to be included in the build.
   */
  scripts?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * Global styles to be included in the build.
   */
  styles?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * The stylesheet language to use for the application's inline component styles.
   */
  inlineStyleLanguage?: 'css' | 'less' | 'sass' | 'scss';
  /**
   * Options to pass to style preprocessors.
   */
  stylePreprocessorOptions?: {
    /**
     * Paths to include. Paths will be resolved to workspace root.
     */
    includePaths?: string[];
  };
  /**
   * Exclude the listed external dependencies from being bundled into the bundle. Instead, the created bundle relies on these dependencies to be available during runtime.
   */
  externalDependencies?: string[];
  /**
   * Enables optimization of the build output. Including minification of scripts and styles, tree-shaking, dead-code elimination, inlining of critical CSS and fonts inlining. For more information, see https://angular.dev/reference/configs/workspace-config#optimization-configuration.
   */
  optimization?:
    | {
        /**
         * Enables optimization of the scripts output.
         */
        scripts?: boolean;
        /**
         * Enables optimization of the styles output.
         */
        styles?:
          | {
              /**
               * Minify CSS definitions by removing extraneous whitespace and comments, merging identifiers and minimizing values.
               */
              minify?: boolean;
              /**
               * Extract and inline critical CSS definitions to improve first paint time.
               */
              inlineCritical?: boolean;
            }
          | boolean;
        /**
         * Enables optimization for fonts. This option requires internet access. `HTTPS_PROXY` environment variable can be used to specify a proxy server.
         */
        fonts?:
          | {
              /**
               * Reduce render blocking requests by inlining external Google Fonts and Adobe Fonts CSS definitions in the application's HTML index file. This option requires internet access. `HTTPS_PROXY` environment variable can be used to specify a proxy server.
               */
              inline?: boolean;
            }
          | boolean;
      }
    | boolean;
  /**
   * Replace compilation source files with other compilation source files in the build.
   */
  fileReplacements?: FileReplacement1[];
  /**
   * The full path for the new output directory, relative to the current workspace.
   */
  outputPath: string;
  /**
   * The path where style resources will be placed, relative to outputPath.
   */
  resourcesOutputPath?: string;
  /**
   * Build using Ahead of Time compilation.
   */
  aot?: boolean;
  /**
   * Output source maps for scripts and styles. For more information, see https://angular.dev/reference/configs/workspace-config#source-map-configuration.
   */
  sourceMap?:
    | {
        /**
         * Output source maps for all scripts.
         */
        scripts?: boolean;
        /**
         * Output source maps for all styles.
         */
        styles?: boolean;
        /**
         * Output source maps used for error reporting tools.
         */
        hidden?: boolean;
        /**
         * Resolve vendor packages source maps.
         */
        vendor?: boolean;
      }
    | boolean;
  /**
   * Generate a seperate bundle containing only vendor libraries. This option should only be used for development to reduce the incremental compilation time.
   */
  vendorChunk?: boolean;
  /**
   * Generate a seperate bundle containing code used across multiple bundles.
   */
  commonChunk?: boolean;
  /**
   * Base url for the application being built.
   */
  baseHref?: string;
  /**
   * Customize the base path for the URLs of resources in 'index.html' and component stylesheets. This option is only necessary for specific deployment scenarios, such as with Angular Elements or when utilizing different CDN locations.
   */
  deployUrl?: string;
  /**
   * Adds more details to output logging.
   */
  verbose?: boolean;
  /**
   * Log progress to the console while building.
   */
  progress?: boolean;
  /**
   * How to handle missing translations for i18n.
   */
  i18nMissingTranslation?: 'warning' | 'error' | 'ignore';
  /**
   * How to handle duplicate translations for i18n.
   */
  i18nDuplicateTranslation?: 'warning' | 'error' | 'ignore';
  /**
   * Translate the bundles in one or more locales.
   */
  localize?: boolean | [string, ...string[]];
  /**
   * Run build when files change.
   */
  watch?: boolean;
  /**
   * Define the output filename cache-busting hashing mode.
   */
  outputHashing?: 'none' | 'all' | 'media' | 'bundles';
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
  /**
   * Delete the output path before building.
   */
  deleteOutputPath?: boolean;
  /**
   * Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set.
   */
  preserveSymlinks?: boolean;
  /**
   * Extract all licenses in a separate file.
   */
  extractLicenses?: boolean;
  /**
   * Enables advanced build optimizations when using the 'aot' option.
   */
  buildOptimizer?: boolean;
  /**
   * Use file name for lazy loaded chunks.
   */
  namedChunks?: boolean;
  /**
   * Enables the use of subresource integrity validation.
   */
  subresourceIntegrity?: boolean;
  /**
   * Generates a service worker config for production builds.
   */
  serviceWorker?: boolean;
  /**
   * Path to ngsw-config.json.
   */
  ngswConfigPath?: string;
  /**
   * Configures the generation of the application's HTML index.
   */
  index:
    | string
    | {
        /**
         * The path of a file to use for the application's generated HTML index.
         */
        input: string;
        /**
         * The output path of the application's generated HTML index file. The full provided path will be used and will be considered relative to the application's configured output path.
         */
        output?: string;
        [k: string]: unknown;
      }
    | false;
  /**
   * Generates a 'stats.json' file which can be analyzed using tools such as 'webpack-bundle-analyzer'.
   */
  statsJson?: boolean;
  /**
   * Budget thresholds to ensure parts of your application stay within boundaries which you set.
   */
  budgets?: Budget2[];
  /**
   * TypeScript configuration for Web Worker modules.
   */
  webWorkerTsConfig?: string;
  /**
   * Define the crossorigin attribute setting of elements that provide CORS support.
   */
  crossOrigin?: 'none' | 'anonymous' | 'use-credentials';
  /**
   * A list of CommonJS or AMD packages that are allowed to be used without a build time warning. Use `'*'` to allow all.
   */
  allowedCommonJsDependencies?: string[];
}
interface FileReplacement1 {
  replace: string;
  with: string;
}
interface Budget2 {
  /**
   * The type of budget.
   */
  type: 'all' | 'allScript' | 'any' | 'anyScript' | 'anyComponentStyle' | 'bundle' | 'initial';
  /**
   * The name of the bundle.
   */
  name?: string;
  /**
   * The baseline size for comparison.
   */
  baseline?: string;
  /**
   * The maximum threshold for warning relative to the baseline.
   */
  maximumWarning?: string;
  /**
   * The maximum threshold for error relative to the baseline.
   */
  maximumError?: string;
  /**
   * The minimum threshold for warning relative to the baseline.
   */
  minimumWarning?: string;
  /**
   * The minimum threshold for error relative to the baseline.
   */
  minimumError?: string;
  /**
   * The threshold for warning relative to the baseline (min & max).
   */
  warning?: string;
  /**
   * The threshold for error relative to the baseline (min & max).
   */
  error?: string;
}
/**
 * Dev Server target options for Build Facade.
 */
interface DevServerTarget {
  /**
   * A build builder target to serve in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.
   */
  buildTarget: string;
  /**
   * Port to listen on.
   */
  port?: number;
  /**
   * Host to listen on.
   */
  host?: string;
  /**
   * Proxy configuration file. For more information, see https://angular.dev/tools/cli/serve#proxying-to-a-backend-server.
   */
  proxyConfig?: string;
  /**
   * Serve using HTTPS.
   */
  ssl?: boolean;
  /**
   * SSL key to use for serving HTTPS.
   */
  sslKey?: string;
  /**
   * SSL certificate to use for serving HTTPS.
   */
  sslCert?: string;
  /**
   * Custom HTTP headers to be added to all responses.
   */
  headers?: {
    [k: string]: string;
  };
  /**
   * Opens the url in default browser.
   */
  open?: boolean;
  /**
   * Adds more details to output logging.
   */
  verbose?: boolean;
  /**
   * Whether to reload the page on change, using live-reload.
   */
  liveReload?: boolean;
  /**
   * The pathname where the application will be served.
   */
  servePath?: string;
  /**
   * Enable hot module replacement. Defaults to the value of 'liveReload'. Currently, only global and component stylesheets are supported.
   */
  hmr?: boolean;
  /**
   * Rebuild on change.
   */
  watch?: boolean;
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
  /**
   * Activate debugging inspector. This option only has an effect when 'SSR' or 'SSG' are enabled.
   */
  inspect?: string | boolean;
  /**
   * Enable and control the Vite-based development server's prebundling capabilities. To enable prebundling, the Angular CLI cache must also be enabled.
   */
  prebundle?:
    | boolean
    | {
        /**
         * List of package imports that should not be prebundled by the development server. The packages will be bundled into the application code itself.
         */
        exclude: string[];
      };
}
/**
 * Dev Server target options for Build Facade.
 */
interface DevServerTarget1 {
  /**
   * A build builder target to serve in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.
   */
  buildTarget: string;
  /**
   * Port to listen on.
   */
  port?: number;
  /**
   * Host to listen on.
   */
  host?: string;
  /**
   * Proxy configuration file. For more information, see https://angular.dev/tools/cli/serve#proxying-to-a-backend-server.
   */
  proxyConfig?: string;
  /**
   * Serve using HTTPS.
   */
  ssl?: boolean;
  /**
   * SSL key to use for serving HTTPS.
   */
  sslKey?: string;
  /**
   * SSL certificate to use for serving HTTPS.
   */
  sslCert?: string;
  /**
   * Custom HTTP headers to be added to all responses.
   */
  headers?: {
    [k: string]: string;
  };
  /**
   * Opens the url in default browser.
   */
  open?: boolean;
  /**
   * Adds more details to output logging.
   */
  verbose?: boolean;
  /**
   * Whether to reload the page on change, using live-reload.
   */
  liveReload?: boolean;
  /**
   * The URL that the browser client (or live-reload client, if enabled) should use to connect to the development server. Use for a complex dev server setup, such as one with reverse proxies. This option has no effect when using the 'application' or other esbuild-based builders.
   */
  publicHost?: string;
  /**
   * List of hosts that are allowed to access the dev server. This option has no effect when using the 'application' or other esbuild-based builders.
   */
  allowedHosts?: string[];
  /**
   * The pathname where the application will be served.
   */
  servePath?: string;
  /**
   * Don't verify connected clients are part of allowed hosts. This option has no effect when using the 'application' or other esbuild-based builders.
   */
  disableHostCheck?: boolean;
  /**
   * Enable hot module replacement.
   */
  hmr?: boolean;
  /**
   * Rebuild on change.
   */
  watch?: boolean;
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
  /**
   * Activate debugging inspector. This option only has an effect when 'SSR' or 'SSG' are enabled.
   */
  inspect?: string | boolean;
  /**
   * Force the development server to use the 'browser-esbuild' builder when building. This is a developer preview option for the esbuild-based build system.
   */
  forceEsbuild?: boolean;
  /**
   * Enable and control the Vite-based development server's prebundling capabilities. To enable prebundling, the Angular CLI cache must also be enabled. This option has no effect when using the 'browser' or other Webpack-based builders.
   */
  prebundle?:
    | boolean
    | {
        /**
         * List of package imports that should not be prebundled by the development server. The packages will be bundled into the application code itself.
         */
        exclude: string[];
      };
}
/**
 * Extract i18n target options for Build Facade.
 */
interface ExtractI18NTarget {
  /**
   * A builder target to extract i18n messages in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.
   */
  buildTarget?: string;
  /**
   * Output format for the generated file.
   */
  format?: 'xmb' | 'xlf' | 'xlif' | 'xliff' | 'xlf2' | 'xliff2' | 'json' | 'arb' | 'legacy-migrate';
  /**
   * Log progress to the console.
   */
  progress?: boolean;
  /**
   * Path where output will be placed.
   */
  outputPath?: string;
  /**
   * Name of the file to output.
   */
  outFile?: string;
}
/**
 * Extract i18n target options for Build Facade.
 */
interface ExtractI18NTarget1 {
  /**
   * A builder target to extract i18n messages in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.
   */
  buildTarget?: string;
  /**
   * Output format for the generated file.
   */
  format?: 'xmb' | 'xlf' | 'xlif' | 'xliff' | 'xlf2' | 'xliff2' | 'json' | 'arb' | 'legacy-migrate';
  /**
   * Log progress to the console.
   */
  progress?: boolean;
  /**
   * Path where output will be placed.
   */
  outputPath?: string;
  /**
   * Name of the file to output.
   */
  outFile?: string;
}
/**
 * Karma target options for Build Facade.
 */
export interface KarmaTarget {
  /**
   * The name of the main entry-point file.
   */
  main?: string;
  /**
   * The name of the TypeScript configuration file.
   */
  tsConfig: string;
  /**
   * The name of the Karma configuration file.
   */
  karmaConfig?: string;
  /**
   * Polyfills to be included in the build.
   */
  polyfills?: string[] | string;
  /**
   * List of static application assets.
   */
  assets?: (
    | {
        /**
         * The pattern to match.
         */
        glob: string;
        /**
         * The input directory path in which to apply 'glob'. Defaults to the project root.
         */
        input: string;
        /**
         * Absolute path within the output.
         */
        output?: string;
        /**
         * An array of globs to ignore.
         */
        ignore?: string[];
      }
    | string
  )[];
  /**
   * Global scripts to be included in the build.
   */
  scripts?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * Global styles to be included in the build.
   */
  styles?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * The stylesheet language to use for the application's inline component styles.
   */
  inlineStyleLanguage?: 'css' | 'less' | 'sass' | 'scss';
  /**
   * Options to pass to style preprocessors
   */
  stylePreprocessorOptions?: {
    /**
     * Paths to include. Paths will be resolved to workspace root.
     */
    includePaths?: string[];
  };
  /**
   * Globs of files to include, relative to project root.
   * There are 2 special cases:
   *  - when a path to directory is provided, all spec files ending ".spec.@(ts|tsx)" will be included
   *  - when a path to a file is provided, and a matching spec file exists it will be included instead.
   */
  include?: string[];
  /**
   * Globs of files to exclude, relative to the project root.
   */
  exclude?: string[];
  /**
   * Output source maps for scripts and styles. For more information, see https://angular.dev/reference/configs/workspace-config#source-map-configuration.
   */
  sourceMap?:
    | {
        /**
         * Output source maps for all scripts.
         */
        scripts?: boolean;
        /**
         * Output source maps for all styles.
         */
        styles?: boolean;
        /**
         * Resolve vendor packages source maps.
         */
        vendor?: boolean;
      }
    | boolean;
  /**
   * Log progress to the console while building.
   */
  progress?: boolean;
  /**
   * Run build when files change.
   */
  watch?: boolean;
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
  /**
   * Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set.
   */
  preserveSymlinks?: boolean;
  /**
   * Override which browsers tests are run against. Set to `false` to not use any browser.
   */
  browsers?: string | false;
  /**
   * Output a code coverage report.
   */
  codeCoverage?: boolean;
  /**
   * Globs to exclude from code coverage.
   */
  codeCoverageExclude?: string[];
  /**
   * Replace compilation source files with other compilation source files in the build.
   */
  fileReplacements?: (
    | {
        src: string;
        replaceWith: string;
      }
    | {
        replace: string;
        with: string;
      }
  )[];
  /**
   * Karma reporters to use. Directly passed to the karma runner.
   */
  reporters?: string[];
  /**
   * Determines how to build the code under test. If set to 'detect', attempts to follow the development builder.
   */
  builderMode?: 'detect' | 'browser' | 'application';
  /**
   * TypeScript configuration for Web Worker modules.
   */
  webWorkerTsConfig?: string;
}
/**
 * Jest target options
 */
interface JestBrowserSchemaForBuildFacade {
  /**
   * Globs of files to include, relative to project root.
   */
  include?: string[];
  /**
   * Globs of files to exclude, relative to the project root.
   */
  exclude?: string[];
  /**
   * The name of the TypeScript configuration file.
   */
  tsConfig: string;
  /**
   * A list of polyfills to include in the build. Can be a full path for a file, relative to the current workspace or module specifier. Example: 'zone.js'.
   */
  polyfills?: string[];
}
/**
 * Web Test Runner target options for Build Facade.
 */
interface WebTestRunnerTarget {
  /**
   * The name of the main entry-point file.
   */
  main?: string;
  /**
   * The name of the TypeScript configuration file.
   */
  tsConfig: string;
  /**
   * Polyfills to be included in the build.
   */
  polyfills?: string[] | string;
  /**
   * List of static application assets.
   */
  assets?: (
    | {
        /**
         * The pattern to match.
         */
        glob: string;
        /**
         * The input directory path in which to apply 'glob'. Defaults to the project root.
         */
        input: string;
        /**
         * Absolute path within the output.
         */
        output?: string;
        /**
         * An array of globs to ignore.
         */
        ignore?: string[];
      }
    | string
  )[];
  /**
   * Global scripts to be included in the build.
   */
  scripts?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * Global styles to be included in the build.
   */
  styles?: (
    | {
        /**
         * The file to include.
         */
        input: string;
        /**
         * The bundle name for this extra entry point.
         */
        bundleName?: string;
        /**
         * If the bundle will be referenced in the HTML file.
         */
        inject?: boolean;
      }
    | string
  )[];
  /**
   * The stylesheet language to use for the application's inline component styles.
   */
  inlineStyleLanguage?: 'css' | 'less' | 'sass' | 'scss';
  /**
   * Options to pass to style preprocessors
   */
  stylePreprocessorOptions?: {
    /**
     * Paths to include. Paths will be resolved to workspace root.
     */
    includePaths?: string[];
  };
  /**
   * Globs of files to include, relative to project root.
   * There are 2 special cases:
   *  - when a path to directory is provided, all spec files ending ".spec.@(ts|tsx)" will be included
   *  - when a path to a file is provided, and a matching spec file exists it will be included instead.
   */
  include?: string[];
  /**
   * Globs of files to exclude, relative to the project root.
   */
  exclude?: string[];
  /**
   * Output source maps for scripts and styles. For more information, see https://angular.dev/reference/configs/workspace-config#source-map-configuration.
   */
  sourceMap?:
    | {
        /**
         * Output source maps for all scripts.
         */
        scripts?: boolean;
        /**
         * Output source maps for all styles.
         */
        styles?: boolean;
        /**
         * Resolve vendor packages source maps.
         */
        vendor?: boolean;
      }
    | boolean;
  /**
   * Log progress to the console while building.
   */
  progress?: boolean;
  /**
   * Run build when files change.
   */
  watch?: boolean;
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
  /**
   * Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set.
   */
  preserveSymlinks?: boolean;
  /**
   * Override which browsers tests are run against.
   */
  browsers?: string;
  /**
   * Output a code coverage report.
   */
  codeCoverage?: boolean;
  /**
   * Globs to exclude from code coverage.
   */
  codeCoverageExclude?: string[];
  /**
   * Replace compilation source files with other compilation source files in the build.
   */
  fileReplacements?: (
    | {
        src: string;
        replaceWith: string;
      }
    | {
        replace: string;
        with: string;
      }
  )[];
  /**
   * TypeScript configuration for Web Worker modules.
   */
  webWorkerTsConfig?: string;
}
/**
 * SSR Dev Server target options for Build Facade.
 */
interface SSRDevServerTarget {
  /**
   * Browser target to build.
   */
  browserTarget: string;
  /**
   * Server target to build.
   */
  serverTarget: string;
  /**
   * Host to listen on.
   */
  host?: string;
  /**
   * Port to start the development server at. Default is 4200. Pass 0 to get a dynamically assigned port.
   */
  port?: number;
  /**
   * Rebuild on change.
   */
  watch?: boolean;
  /**
   * The URL that the browser client should use to connect to the development server. Use for a complex dev server setup, such as one with reverse proxies.
   */
  publicHost?: string;
  /**
   * Opens the url in default browser.
   */
  open?: boolean;
  /**
   * Log progress to the console while building.
   */
  progress?: boolean;
  /**
   * Launch the development server in inspector mode and listen on address and port '127.0.0.1:9229'.
   */
  inspect?: boolean;
  /**
   * Serve using HTTPS.
   */
  ssl?: boolean;
  /**
   * SSL key to use for serving HTTPS.
   */
  sslKey?: string;
  /**
   * SSL certificate to use for serving HTTPS.
   */
  sslCert?: string;
  /**
   * Proxy configuration file.
   */
  proxyConfig?: string;
  /**
   * Adds more details to output logging.
   */
  verbose?: boolean;
}
interface UniversalTarget {
  /**
   * List of static application assets.
   */
  assets?: (
    | {
        /**
         * Allow glob patterns to follow symlink directories. This allows subdirectories of the symlink to be searched.
         */
        followSymlinks?: boolean;
        /**
         * The pattern to match.
         */
        glob: string;
        /**
         * The input directory path in which to apply 'glob'. Defaults to the project root.
         */
        input: string;
        /**
         * An array of globs to ignore.
         */
        ignore?: string[];
        /**
         * Absolute path within the output.
         */
        output?: string;
      }
    | string
  )[];
  /**
   * The name of the main entry-point file.
   */
  main: string;
  /**
   * The name of the TypeScript configuration file.
   */
  tsConfig: string;
  /**
   * The stylesheet language to use for the application's inline component styles.
   */
  inlineStyleLanguage?: 'css' | 'less' | 'sass' | 'scss';
  /**
   * Options to pass to style preprocessors
   */
  stylePreprocessorOptions?: {
    /**
     * Paths to include. Paths will be resolved to workspace root.
     */
    includePaths?: string[];
  };
  /**
   * Enables optimization of the build output. Including minification of scripts and styles, tree-shaking and dead-code elimination. For more information, see https://angular.dev/reference/configs/workspace-config#optimization-configuration.
   */
  optimization?:
    | {
        /**
         * Enables optimization of the scripts output.
         */
        scripts?: boolean;
        /**
         * Enables optimization of the styles output.
         */
        styles?: boolean;
      }
    | boolean;
  /**
   * Replace compilation source files with other compilation source files in the build.
   */
  fileReplacements?: (
    | {
        src: string;
        replaceWith: string;
      }
    | {
        replace: string;
        with: string;
      }
  )[];
  /**
   * Path where output will be placed.
   */
  outputPath: string;
  /**
   * The path where style resources will be placed, relative to outputPath.
   */
  resourcesOutputPath?: string;
  /**
   * Output source maps for scripts and styles. For more information, see https://angular.dev/reference/configs/workspace-config#source-map-configuration.
   */
  sourceMap?:
    | {
        /**
         * Output source maps for all scripts.
         */
        scripts?: boolean;
        /**
         * Output source maps for all styles.
         */
        styles?: boolean;
        /**
         * Output source maps used for error reporting tools.
         */
        hidden?: boolean;
        /**
         * Resolve vendor packages source maps.
         */
        vendor?: boolean;
      }
    | boolean;
  /**
   * Customize the base path for the URLs of resources in 'index.html' and component stylesheets. This option is only necessary for specific deployment scenarios, such as with Angular Elements or when utilizing different CDN locations.
   */
  deployUrl?: string;
  /**
   * Generate a seperate bundle containing only vendor libraries. This option should only be used for development to reduce the incremental compilation time.
   */
  vendorChunk?: boolean;
  /**
   * Adds more details to output logging.
   */
  verbose?: boolean;
  /**
   * Log progress to the console while building.
   */
  progress?: boolean;
  /**
   * How to handle missing translations for i18n.
   */
  i18nMissingTranslation?: 'warning' | 'error' | 'ignore';
  /**
   * How to handle duplicate translations for i18n.
   */
  i18nDuplicateTranslation?: 'warning' | 'error' | 'ignore';
  /**
   * Translate the bundles in one or more locales.
   */
  localize?: boolean | [string, ...string[]];
  /**
   * Define the output filename cache-busting hashing mode.
   */
  outputHashing?: 'none' | 'all' | 'media' | 'bundles';
  /**
   * Delete the output path before building.
   */
  deleteOutputPath?: boolean;
  /**
   * Do not use the real path when resolving modules. If unset then will default to `true` if NodeJS option --preserve-symlinks is set.
   */
  preserveSymlinks?: boolean;
  /**
   * Extract all licenses in a separate file, in the case of production builds only.
   */
  extractLicenses?: boolean;
  /**
   * Enables advanced build optimizations.
   */
  buildOptimizer?: boolean;
  /**
   * Use file name for lazy loaded chunks.
   */
  namedChunks?: boolean;
  /**
   * Exclude the listed external dependencies from being bundled into the bundle. Instead, the created bundle relies on these dependencies to be available during runtime.
   */
  externalDependencies?: string[];
  /**
   * Generates a 'stats.json' file which can be analyzed using tools such as 'webpack-bundle-analyzer'.
   */
  statsJson?: boolean;
  /**
   * Run build when files change.
   */
  watch?: boolean;
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
}
/**
 * ng-packagr target options for Build Architect. Use to build library projects.
 */
interface NgPackagrTarget {
  /**
   * The file path for the ng-packagr configuration file, relative to the current workspace.
   */
  project: string;
  /**
   * The full path for the TypeScript configuration file, relative to the current workspace.
   */
  tsConfig?: string;
  /**
   * Run build when files change.
   */
  watch?: boolean;
  /**
   * Enable and define the file watching poll time period in milliseconds.
   */
  poll?: number;
}
